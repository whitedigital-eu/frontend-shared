name: NPM Publish

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type (patch, minor, major)'
        required: false
        default: ''

jobs:
  publish:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          registry-url: 'https://registry.npmjs.org'

      - name: Configure Git User
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Validate dispatch branch
        if: github.event_name == 'workflow_dispatch'
        run: |
          BRANCH="${GITHUB_REF##*/}"
          if [[ "$BRANCH" != "main" ]]; then
            echo "❌ Manual dispatch allowed only on 'main' branch. Current: $BRANCH"
            exit 1
          fi

      - name: Get commit message
        id: commit_message
        run: |
          COMMIT_MSG=$(git log -1 --pretty=format:%s || echo "")
          echo "message=$COMMIT_MSG" >> $GITHUB_OUTPUT

      - name: Install dependencies
        working-directory: ./src
        run: yarn install

      - name: Determine version bump type
        id: version_bump
        run: |
          INPUT_TYPE="${{ github.event.inputs.release_type }}"
          COMMIT_MSG="${{ steps.commit_message.outputs.message }}"
          
          if [[ "$INPUT_TYPE" != "" ]]; then
            case "$INPUT_TYPE" in
              patch|minor|major)
                echo "type=$INPUT_TYPE" >> $GITHUB_OUTPUT
                echo "pre=false" >> $GITHUB_OUTPUT
                ;;
              *)
                echo "❌ Invalid release_type input: '$INPUT_TYPE'"
                exit 1
                ;;
            esac
          elif [[ "$COMMIT_MSG" == *"[major]"* ]]; then
            echo "type=major" >> $GITHUB_OUTPUT
            echo "pre=false" >> $GITHUB_OUTPUT
          elif [[ "$COMMIT_MSG" == *"[minor]"* ]]; then
            echo "type=minor" >> $GITHUB_OUTPUT
            echo "pre=false" >> $GITHUB_OUTPUT
          elif [[ "$COMMIT_MSG" == *"[patch]"* ]]; then
            echo "type=patch" >> $GITHUB_OUTPUT
            echo "pre=false" >> $GITHUB_OUTPUT
          else
            echo "type=prerelease" >> $GITHUB_OUTPUT
            echo "pre=true" >> $GITHUB_OUTPUT
          fi

      - name: Run tests
        working-directory: ./src
        run: yarn test

      - name: Bump version, commit, and tag
        id: tag_version
        run: |
          # Step 1: Bump the version in package.json only
          if [[ "${{ steps.version_bump.outputs.pre }}" == "true" ]]; then
            npm --prefix ./src --no-git-tag-version version prerelease --preid=beta
          else
            npm --prefix ./src --no-git-tag-version version ${{ steps.version_bump.outputs.type }}
          fi
          
          # Step 2: Get the new version for use in messages and outputs
          NEW_VERSION=$(node -p "require('./src/package.json').version")
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
          
          # Step 3: Determine the correct prefix for commit and tag messages
          if [[ "${{ steps.version_bump.outputs.pre }}" == "true" ]]; then
            MESSAGE_PREFIX="prerelease:"
          else
            MESSAGE_PREFIX="release:"
          fi
          
          # Step 4: Stage, commit, and tag the change using the correct prefix
          git add ./src/package.json ./src/yarn.lock
          git commit -m "$MESSAGE_PREFIX v${NEW_VERSION} [skip ci]"
          git tag -a "v${NEW_VERSION}" -m "$MESSAGE_PREFIX v${NEW_VERSION}"

      - name: Get new version
        id: get_version
        run: echo "version=${{ steps.tag_version.outputs.version }}" >> $GITHUB_OUTPUT

      - name: Build package
        working-directory: ./src
        run: yarn build

      - name: Publish to NPM
        working-directory: ./src
        run: |
          if [[ "${{ steps.version_bump.outputs.pre }}" == "true" ]]; then
            npm publish --access public --tag next
          else
            npm publish --access public
          fi
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Push version changes
        run: |
          git push origin HEAD:main
          git push --tags

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.get_version.outputs.version }}
          name: Release v${{ steps.get_version.outputs.version }}
          body: |
            Automated release from commit:
            ${{ steps.commit_message.outputs.message }}
          prerelease: ${{ steps.version_bump.outputs.pre }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
